import { apiClient } from "./API";
import type { Reservation, ReservationFilter } from "../../interfaces/Reservation";

// ======= Reservation API Services =======

// üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
export const getAllReservations = async (filters?: ReservationFilter): Promise<Reservation[]> => {
  const params = new URLSearchParams();
  
  if (filters?.user_id) params.append('user_id', filters.user_id);
  if (filters?.book_id) params.append('book_id', filters.book_id.toString());
  if (filters?.status) params.append('status', filters.status);

  const response = await apiClient.get(`/api/reservations?${params.toString()}`);
  return response.data.data;
};

// üìã ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
export const getUserReservations = async (userId: string): Promise<Reservation[]> => {
  const response = await apiClient.get(`/api/reservations?user_id=${userId}`);
  return response.data.data;
};

// üìÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
export const getReservationById = async (id: number): Promise<Reservation> => {
  const response = await apiClient.get(`/api/reservations/${id}`);
  return response.data.data;
};

// ‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
export const createReservation = async (reservationRequest: {
  user_id: string;
  book_id: number;
}): Promise<Reservation> => {
  const response = await apiClient.post(`/api/reservations`, reservationRequest);
  return response.data.data;
};

// ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (Fulfill) - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
export const fulfillReservation = async (id: number, userId: string): Promise<Reservation> => {
  const response = await apiClient.patch(`/api/reservations/${id}/fulfill`, {
    user_id: userId
  });
  return response.data.data;
};

// ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const cancelReservation = async (id: number, userId: string, reason?: string): Promise<Reservation> => {
  const response = await apiClient.patch(`/api/reservations/${id}/cancel`, {
    user_id: userId,
    reason: reason
  });
  return response.data.data;
};

// üî¢ ‡∏î‡∏π‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠
export const getQueuePosition = async (id: number): Promise<{
  position: number;
  total_ahead: number;
  estimated_wait_days?: number;
}> => {
  const response = await apiClient.get(`/api/reservations/${id}/queue-position`);
  return response.data.data;
};

// ======= Utility Functions =======

// üé® ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const getReservationStatusColor = (status: string): string => {
  switch (status.toLowerCase()) {
    case 'waiting': return 'orange';
    case 'notified': return 'blue';
    case 'fulfilled': return 'green';
    case 'expired': return 'red';
    case 'cancelled': return 'gray';
    default: return 'default';
  }
};

// üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const getReservationStatusText = (status: string): string => {
  switch (status.toLowerCase()) {
    case 'waiting': return '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£';
    case 'notified': return '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
    case 'fulfilled': return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
    case 'expired': return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
    case 'cancelled': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
    default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  }
};

// üïí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏´‡∏°
export const isNearExpiry = (expiresAt?: string): boolean => {
  if (!expiresAt) return false;
  
  const now = new Date();
  const expiry = new Date(expiresAt);
  const hoursUntilExpiry = (expiry.getTime() - now.getTime()) / (1000 * 60 * 60);
  
  return hoursUntilExpiry > 0 && hoursUntilExpiry <= 24; // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
};

// üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
export const getTimeUntilExpiry = (expiresAt?: string): string => {
  if (!expiresAt) return '';
  
  const now = new Date();
  const expiry = new Date(expiresAt);
  const diffMs = expiry.getTime() - now.getTime();
  
  if (diffMs <= 0) return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
  
  const hours = Math.floor(diffMs / (1000 * 60 * 60));
  const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  } else {
    return `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  }
};
